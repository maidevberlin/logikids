import { useState } from 'react'
import { jsPDF } from 'jspdf'
import { cryptoService } from '../services/crypto.service'
import { storageService } from '../services/storage.service'

/**
 * Component for generating and downloading recovery kit PDF
 * Recovery kit contains QR code and backup code for account recovery
 */
export function RecoveryKit() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)

  /**
   * Convert QR data to base64 image for PDF
   */
  const generateQRImage = (qrData: string): Promise<string> => {
    return new Promise((resolve, reject) => {
      // Create temporary canvas for QR code
      const canvas = document.createElement('canvas')
      const size = 256
      canvas.width = size
      canvas.height = size
      const ctx = canvas.getContext('2d')

      if (!ctx) {
        reject(new Error('Cannot create canvas context'))
        return
      }

      // Use qrcode library to draw QR on canvas
      import('qrcode').then(QRCode => {
        QRCode.toCanvas(canvas, qrData, {
          width: size,
          margin: 2,
          errorCorrectionLevel: 'H',
        }, (error) => {
          if (error) {
            reject(error)
          } else {
            resolve(canvas.toDataURL('image/png'))
          }
        })
      }).catch(reject)
    })
  }

  /**
   * Format userId and key as backup code
   * Format: XXXX-XXXX-XXXX-XXXX-...
   */
  const formatBackupCode = (userId: string, keyBase64: string): string => {
    const combined = `${userId}:${keyBase64}`
    const base64 = btoa(combined)

    // Split into groups of 4 characters
    const groups = []
    for (let i = 0; i < base64.length; i += 4) {
      groups.push(base64.substring(i, i + 4))
    }

    return groups.join('-')
  }

  /**
   * Generate and download recovery kit PDF
   */
  const handleGenerateKit = async () => {
    setIsGenerating(true)
    setError(null)
    setSuccess(false)

    try {
      // Get credentials
      const userId = await storageService.getUserId()
      const key = await storageService.getKey()

      if (!userId || !key) {
        throw new Error('Not authenticated')
      }

      // Generate QR data
      const qrData = await cryptoService.generateQRString(key, userId)
      const qrImage = await generateQRImage(qrData)

      // Export key for backup code
      const exported = await cryptoService.exportKeyForQR(key, userId)
      const backupCode = formatBackupCode(userId, exported.key)

      // Create PDF
      const pdf = new jsPDF()

      // Title
      pdf.setFontSize(20)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Logikids Recovery Kit', 105, 20, { align: 'center' })

      // Subtitle
      pdf.setFontSize(12)
      pdf.setFont('helvetica', 'normal')
      pdf.text('Save this document to recover your account', 105, 30, { align: 'center' })

      // QR Code
      pdf.addImage(qrImage, 'PNG', 77, 40, 56, 56)

      // QR Code Label
      pdf.setFontSize(10)
      pdf.text('Scan this QR code to restore your account', 105, 102, { align: 'center' })

      // Backup Code Section
      pdf.setFontSize(14)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Backup Code', 20, 120)

      // Backup Code
      pdf.setFontSize(9)
      pdf.setFont('courier', 'normal')
      const codeLines = []
      for (let i = 0; i < backupCode.length; i += 40) {
        codeLines.push(backupCode.substring(i, i + 40))
      }
      let y = 130
      for (const line of codeLines) {
        pdf.text(line, 20, y)
        y += 6
      }

      // User ID
      pdf.setFontSize(10)
      pdf.setFont('helvetica', 'normal')
      y += 10
      pdf.text(`User ID: ${userId}`, 20, y)

      // Instructions
      y += 15
      pdf.setFontSize(12)
      pdf.setFont('helvetica', 'bold')
      pdf.text('How to Use This Recovery Kit:', 20, y)

      pdf.setFontSize(10)
      pdf.setFont('helvetica', 'normal')
      y += 8
      const instructions = [
        '1. Keep this document in a safe place',
        '2. To restore your account, scan the QR code or enter the backup code',
        '3. Your account data is encrypted - this recovery kit is needed to decrypt it',
        '4. Anyone with this recovery kit can access your account',
      ]
      for (const instruction of instructions) {
        pdf.text(instruction, 25, y)
        y += 6
      }

      // Security Warning
      y += 10
      pdf.setFontSize(11)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Security Warning:', 20, y)

      pdf.setFontSize(9)
      pdf.setFont('helvetica', 'normal')
      y += 6
      pdf.text('This recovery kit contains your encryption key. Keep it secure and private.', 20, y)
      y += 5
      pdf.text('Never share it or upload it to cloud services.', 20, y)

      // Footer
      pdf.setFontSize(8)
      pdf.setTextColor(128)
      pdf.text('Generated by Logikids', 105, 280, { align: 'center' })
      pdf.text(new Date().toLocaleString(), 105, 285, { align: 'center' })

      // Download PDF
      pdf.save(`logikids-recovery-kit-${new Date().toISOString().split('T')[0]}.pdf`)

      setSuccess(true)
      setTimeout(() => setSuccess(false), 5000)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate recovery kit')
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-lg font-semibold mb-2">Recovery Kit</h3>
        <p className="text-sm text-gray-600 mb-4">
          Download a PDF with QR code and backup code to recover your account if you lose all devices.
        </p>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      {success && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
          ‚úÖ Recovery kit downloaded! Save it in a secure place.
        </div>
      )}

      <div className="border rounded-lg p-6 bg-gradient-to-br from-blue-50 to-purple-50">
        <div className="text-center mb-4">
          <div className="text-6xl mb-4">üìÑ</div>
          <h4 className="font-semibold text-lg mb-2">Create Your Recovery Kit</h4>
          <p className="text-sm text-gray-700 mb-4">
            A printable PDF with everything needed to restore your account
          </p>
        </div>

        <button
          onClick={handleGenerateKit}
          disabled={isGenerating}
          className="w-full bg-purple-500 text-white rounded px-6 py-3 hover:bg-purple-600 transition disabled:bg-gray-400 font-semibold"
        >
          {isGenerating ? '‚è≥ Generating PDF...' : 'üì• Download Recovery Kit'}
        </button>
      </div>

      {/* What's Included */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <h4 className="font-semibold mb-2">üì¶ What's Included:</h4>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-700">
          <li><strong>QR Code</strong> - Scan to restore instantly</li>
          <li><strong>Backup Code</strong> - Type manually if needed</li>
          <li><strong>User ID</strong> - Your account identifier</li>
          <li><strong>Instructions</strong> - How to use the recovery kit</li>
        </ul>
      </div>

      {/* Security Tips */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <h4 className="font-semibold mb-2">üîí Security Tips:</h4>
        <ul className="list-disc list-inside space-y-1 text-sm text-gray-700">
          <li>Print and store in a safe place (not digitally)</li>
          <li>Never share your recovery kit with anyone</li>
          <li>Don't upload to cloud storage or email</li>
          <li>Keep multiple copies in different safe locations</li>
        </ul>
      </div>
    </div>
  )
}
